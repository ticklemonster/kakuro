{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./scripts/kakuro-store.js","webpack:///./scripts/kakuro-view.js","webpack:///./scripts/main.js","webpack:///./scripts/reduce-hiddenpairs.js","webpack:///./scripts/reduce-pairs.js","webpack:///./scripts/solve-single.js"],"names":["CLUE_COMBINATIONS","Map","CLUE_RE","REF_RE","KakuroStore","puzzlestring","clues","grid","rows","cols","rawclues","split","console","debug","length","reduce","maxrow","clue","match","R1","R2","Math","max","maxcol","C1","C2","charCodeAt","r","gridrow","c","push","isSpace","labelRight","labelDown","cluestr","clue2rc","r1","c1","r2","c2","val","thisclue","name","value","cells","cluelength","abs","combinations","get","slice","labelCell","Error","rc2ref","row","col","cell","prev","curr","refstr","ref2rc","getValueAtRC","str","rowval","parseInt","colval","isNaN","undefined","ref","String","fromCharCode","toString","result","exec","err","error","refrange","ref1","ref2","cluestring","clueval","refrange2rc","KakuroView","puzzle","class","DEFAULT_PUZZLE","Solve_Steps","SolveSingle","stepfn","solve","showfn","show","ReducePairs","ReduceHiddenPairs","ALL_VALUES_MASK","maskToString","maskval","rval","stringToMask","stringval","indexOf","combosToMask","combos","mask","combo","digit","d","m","combosToString","setShowClues","view","setShowCombos","setShowValues","setShowHints","nextStep","getUnfinishedCount","document","getElementById","textContent","disabled","didSomething","userWait","step","stepresult","title","innerText","info","puzzleelement","window","sessionStorage","getItem","KakuroPlayView","alert","innerHTML","reduceValuePairs","remainder","unsolved","forEach","getDataValue","mask0","getAttribute","mask1","pval","min","pmask","rmask","valid","id","solveStep","type","description","constraints","targets","valueMasks","showReduceStep","checked","classList","add","n","oldmask","newmask","diff","setAttribute","showHintDigits","rmoved","querySelector","style","visibility","focus","addEventListener","clearReduceHighlights","event","target","removeEventListener","querySelectorAll","remove","getElementsByClassName","cellMask","isCellSolved","getCluesForCell","padStart","inputel","applyValueEntrySolutionStep","handleCellChange"],"mappings":"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ACA;;AAEA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;kBA3PqBF,U;;;;;;;;;;;;ACAR;;AAEb;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;;AAVA;AAWA,IAAMG,iBAAkB,iUAAxB;;AAEA,IAAMC,cAAc,CAChB,EAAE3C,MAAM4C,sBAAY5C,IAApB,EAA0B6C,QAAQD,sBAAYE,KAA9C,EAAqDC,QAAQH,sBAAYI,IAAzE,EADgB,EAEhB,EAAEhD,MAAMiD,sBAAYjD,IAApB,EAA0B6C,QAAQI,sBAAYH,KAA9C,EAAqDC,QAAQE,sBAAYD,IAAzE,EAFgB,EAGhB,EAAEhD,MAAMkD,4BAAkBlD,IAA1B,EAAgC6C,QAAQK,4BAAkBJ,KAA1D,EAAiEC,QAAQG,4BAAkBF,IAA3F,EAHgB,CAApB;;AAOA;AACA;AACA;AACA,IAAMG,kBAAkB,KAAxB;AACA,SAASC,YAAT,CAAuBC,OAAvB,EAAgC;AAC5B,QAAIC,OAAO,EAAX;AACAA,YAASD,UAAU,CAAX,GAAc,GAAd,GAAkB,GAA1B;AACAC,YAASD,UAAU,CAAX,GAAc,GAAd,GAAkB,GAA1B;AACAC,YAASD,UAAU,CAAX,GAAc,GAAd,GAAkB,GAA1B;AACAC,YAAS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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./scripts/main.js\");\n","////////////////////////////////////////////////////////////////////////////////\r\n// \r\n// Kakuro model\r\n//\r\n// state is stored in this model and all modifications should be via the accesses\r\n// \r\n\r\nconst CLUE_COMBINATIONS = new Map([\r\n    ['2.3',['12']],\r\n    ['2.4',['13']],\r\n    ['2.5',['14', '23']],\r\n    ['2.6',['15', '24']],\r\n    ['2.7',['16', '25', '34']],\r\n    ['2.8',['17', '26', '35']],\r\n    ['2.9',['18', '27', '36', '45']],\r\n    ['2.10',['19', '28', '37', '46']],\r\n    ['2.11',['29', '38', '47', '56']],\r\n    ['2.12',['39', '48', '57']],\r\n    ['2.13',['49', '58', '67']],\r\n    ['2.14',['59', '68']],\r\n    ['2.15',['69', '78']],\r\n    ['2.16',['79']],\r\n    ['2.17',['89']],\r\n    ['3.6',['123']],\r\n    ['3.7',['124']],\r\n    ['3.8',['125', '134']],\r\n    ['3.9',['126', '135', '234']],\r\n    ['3.10',['127', '136', '145', '235']],\r\n    ['3.11',['128', '137', '146', '236', '245']],\r\n    ['3.12',['129', '138', '147', '156', '237', '246', '345']],\r\n    ['3.13',['139', '148', '157', '238', '247', '256', '346']],\r\n    ['3.14',['149', '158', '167', '239', '248', '257', '347', '356']],\r\n    ['3.15',['159', '168', '249', '258', '267', '348', '357', '456']],\r\n    ['3.16',['169', '178', '259', '268', '349', '358', '367', '457']],\r\n    ['3.17',['179', '269', '278', '359', '368', '458', '467']],\r\n    ['3.18',['189', '279', '369', '378', '459', '468', '567']],\r\n    ['3.19',['289', '379', '469', '478', '568']],\r\n    ['3.20',['389', '479', '569', '578']],\r\n    ['3.21',['489', '579', '678']],\r\n    ['3.22',['589', '679']],\r\n    ['3.23',['689']],\r\n    ['3.24',['789']],\r\n    ['4.10',['1234']],\r\n    ['4.11',['1235']],\r\n    ['4.12',['1236', '1245']],\r\n    ['4.13',['1237', '1246', '1345']],\r\n    ['4.14',['1238', '1247', '1256', '1346', '2345']],\r\n    ['4.15',['1239', '1248', '1257', '1347', '1356', '2346']],\r\n    ['4.16',['1249', '1258', '1267', '1348', '1357', '1456', '2347', '2356']],\r\n    ['4.17',['1259', '1268', '1349', '1358', '1367', '1457', '2348', '2357', '2456']],\r\n    ['4.18',['1269', '1278', '1359', '1368', '1458', '1467', '2349', '2358', '2367', '2457', '3456']],\r\n    ['4.19',['1279', '1369', '1378', '1459', '1468', '1567', '2359', '2368', '2458', '2467', '3457']],\r\n    ['4.20',['1289', '1379', '1469', '1478', '1568', '2369', '2378', '2459', '2468', '2567', '3458', '3467']],\r\n    ['4.21',['1389', '1479', '1569', '1578', '2379', '2469', '2478', '2568', '3459', '3468', '3567']],\r\n    ['4.22',['1489', '1579', '1678', '2389', '2479', '2569', '2578', '3469', '3478', '3568', '4567']],\r\n    ['4.23',['1589', '1679', '2489', '2579', '2678', '3479', '3569', '3578', '4568']],\r\n    ['4.24',['1689', '2589', '2679', '3489', '3579', '3678', '4569', '4578']],\r\n    ['4.25',['1789', '2689', '3589', '3679', '4579', '4678']],\r\n    ['4.26',['2789', '3689', '4589', '4679', '5678']],\r\n    ['4.27',['3789', '4689', '5679']],\r\n    ['4.28',['4789', '5689']],\r\n    ['4.29',['5789']],\r\n    ['4.30',['6789']],\r\n    ['5.15',['12345']],\r\n    ['5.16',['12346']],\r\n    ['5.17',['12347', '12356']],\r\n    ['5.18',['12348', '12357', '12456']],\r\n    ['5.19',['12349', '12358', '12367', '12457', '13456']],\r\n    ['5.20',['12359', '12368', '12458', '12467', '13457', '23456']],\r\n    ['5.21',['12369', '12378', '12459', '12468', '12567', '13458', '13467', '23457']],\r\n    ['5.22',['12379', '12469', '12478', '12568', '13459', '13468', '13567', '23458', '23467']],\r\n    ['5.23',['12389', '12479', '12569', '12578', '13469', '13478', '13568', '14567', '23459', '23468', '23567']],\r\n    ['5.24',['12489', '12579', '12678', '13479', '13569', '13578', '14568', '23469', '23478', '23568', '24567']],\r\n    ['5.25',['12589', '12679', '13489', '13579', '13678', '14569', '14578', '23479', '23569', '23578', '24568', '34567']],\r\n    ['5.26',['12689', '13589', '13679', '14579', '14678', '23489', '23579', '23678', '24569', '24578', '34568']],\r\n    ['5.27',['12789', '13689', '14589', '14679', '15678', '23589', '23679', '24579', '24678', '34569', '34578']],\r\n    ['5.28',['13789', '14689', '15679', '23689', '24589', '24679', '25678', '34579', '34678']],\r\n    ['5.29',['14789', '15689', '23789', '24689', '25679', '34589', '34679', '35678']],\r\n    ['5.30',['15789', '24789', '25689', '34689', '35679', '45678']],\r\n    ['5.31',['16789', '25789', '34789', '35689', '45679']],\r\n    ['5.32',['26789', '35789', '45689']],\r\n    ['5.33',['36789', '45789']],\r\n    ['5.34',['46789']],\r\n    ['5.35',['56789']],\r\n    ['6.21',['123456']],\r\n    ['6.22',['123457']],\r\n    ['6.23',['123458', '123467']],\r\n    ['6.24',['123459', '123468', '123567']],\r\n    ['6.25',['123469', '123478', '123568', '124567']],\r\n    ['6.26',['123479', '123569', '123578', '124568', '134567']],\r\n    ['6.27',['123489', '123579', '123678', '124569', '124578', '134568', '234567']],\r\n    ['6.28',['123589', '123679', '124579', '124678', '134569', '134578', '234568']],\r\n    ['6.29',['123689', '124589', '124679', '125678', '134579', '134678', '234569', '234578']],\r\n    ['6.30',['123789', '124689', '125679', '134589', '134679', '135678', '234579', '234678']],\r\n    ['6.31',['124789', '125689', '134689', '135679', '145678', '234589', '234679', '235678']],\r\n    ['6.32',['125789', '134789', '135689', '145679', '234689', '235679', '245678']],\r\n    ['6.33',['126789', '135789', '145689', '234789', '235689', '245679', '345678']],\r\n    ['6.34',['136789', '145789', '235789', '245689', '345679']],\r\n    ['6.35',['146789', '236789', '245789', '345689']],\r\n    ['6.36',['156789', '246789', '345789']],\r\n    ['6.37',['256789', '346789']],\r\n    ['6.38',['356789']],\r\n    ['6.39',['456789']],\r\n    ['7.28',['1234567']],\r\n    ['7.29',['1234568']],\r\n    ['7.30',['1234569', '1234578']],\r\n    ['7.31',['1234579', '1234678']],\r\n    ['7.32',['1234589', '1234679', '1235678']],\r\n    ['7.33',['1234689', '1235679', '1245678']],\r\n    ['7.34',['1234789', '1235689', '1245679', '1345678']],\r\n    ['7.35',['1235789', '1245689', '1345679', '2345678']],\r\n    ['7.36',['1236789', '1245789', '1345689', '2345679']],\r\n    ['7.37',['1246789', '1345789', '2345689']],\r\n    ['7.38',['1256789', '1346789', '2345789']],\r\n    ['7.39',['1356789', '2346789']],\r\n    ['7.40',['1456789', '2356789']],\r\n    ['7.41',['2456789']],\r\n    ['7.42',['3456789']],\r\n    ['8.36',['12345678']],\r\n    ['8.37',['12345679']],\r\n    ['8.38',['12345689']],\r\n    ['8.39',['12345789']],\r\n    ['8.40',['12346789']],\r\n    ['8.41',['12356789']],\r\n    ['8.42',['12456789']],\r\n    ['8.43',['13456789']],\r\n    ['8.44',['23456789']],\r\n    ['9.45',['123456789']],\r\n]);\r\nconst CLUE_RE = /([A-Z]+)([1-9][0-9]*):([A-Z]+)([1-9][0-9]*)=([0-9]+)/;\r\nconst REF_RE = /([A-Z])(\\d+)/;\r\n\r\nexport default class KakuroStore {\r\n    constructor (puzzlestring) {\r\n        this.clues = [];\r\n        this.grid = [];\r\n        this.rows = 0;\r\n        this.cols = 0;\r\n    \r\n        let rawclues = puzzlestring.split(/[,;]/);\r\n        console.debug (`DEBUG: KakuroStore constructing from ${rawclues.length} clues`);\r\n\r\n        // determine the grid dimensions\r\n        this.rows = rawclues.reduce((maxrow, clue) => {\r\n            let [,,R1,,R2,] = clue.match(CLUE_RE);\r\n            return Math.max(maxrow, Math.max(R1, R2));\r\n        }, 0);\r\n        this.cols = rawclues.reduce((maxcol, clue) => {\r\n            let [,C1,,C2,,] = clue.match(CLUE_RE);\r\n            return Math.max(maxcol, Math.max(C1.charCodeAt(0), C2.charCodeAt(0)));\r\n        }, 65) - 64;\r\n        console.debug(`DEBUG: KakuroStore size = ${this.cols}x${this.rows}`);\r\n\r\n        // build the base grid array\r\n        for( var r = 0; r <= this.rows; r++) {\r\n            let gridrow = [];\r\n            for( var c = 0; c <= this.cols; c++) {\r\n                gridrow.push ({ isSpace: false, labelRight: null, labelDown: null, clues: [] });\r\n            }\r\n            this.grid.push (gridrow);\r\n        }\r\n\r\n        // parse the clue strings into something easier to use\r\n        // and fill the grid with content...\r\n        for (const cluestr of rawclues) {\r\n            let [r1, c1, r2, c2, val] = KakuroStore.clue2rc(cluestr);\r\n\r\n            let thisclue = {\r\n                name: cluestr,\r\n                value: val,\r\n                cells: [],         \r\n            };\r\n\r\n            // get the clue combinations - key is [length].[value] \r\n            const cluelength = Math.abs(r2 - r1) + Math.abs(c2 - c1) + 1;\r\n            thisclue.combinations = CLUE_COMBINATIONS.get (`${cluelength}.${val}`).slice (0);\r\n            \r\n            // add the clue labels\r\n            if (r1 == r2) {\r\n                // Horizontal clue\r\n                let labelCell = this.grid[r1][c1 - 1];\r\n                if (labelCell.labelRight !== null)\r\n                    throw new Error('Inavlid puzzle string - multiple labels in one cell at ' + KakuroStore.rc2ref(r1, c1 - 1));\r\n\r\n                labelCell.labelRight = cluestr;\r\n            } else {\r\n                // Vertical clue\r\n                let labelCell = this.grid[r1 - 1][c1];\r\n                if (labelCell.labelDown !== null)\r\n                    throw new Error('Inavlid puzzle string - multiple labels in one cell at ' + KakuroStore.rc2ref(r1 - 1, c1));\r\n\r\n                labelCell.labelDown = cluestr;\r\n            }\r\n\r\n            // add all of the cells to the clue\r\n            for (let row = r1; row <= r2; row++) {\r\n                for (let col = c1; col <= c2; col++) {\r\n                    let cell = this.grid[row][col];\r\n                    if (cell.labelDown !== null || cell.labelRight !== null) \r\n                        throw new Error('Invalid puzzle string - clue labels would overlap spaces.');\r\n                    \r\n                    cell.isSpace = true;\r\n                    cell.clues.push (thisclue);\r\n                    thisclue.cells.push (cell);\r\n                }\r\n            }        \r\n            this.clues.push(thisclue);\r\n        }\r\n    }\r\n\r\n    //\r\n    // Utility functions to convert row/col numbers to A1 refs...\r\n    //\r\n    static rc2ref (row, col) {\r\n        // return a string version of this ref - UP TO 64 COLS MAX!\r\n        const rowval = parseInt(row);\r\n        const colval = parseInt(col);\r\n    \r\n        if (isNaN(rowval) || isNaN(colval) || rowval < 0 || colval < 0 || colval > 64)\r\n            return undefined;\r\n    \r\n        let ref = (colval === 0 ? '_' : String.fromCharCode(64 + colval)) + rowval.toString();\r\n        return ref;\r\n    }\r\n    static ref2rc (ref) {\r\n        // convert from A1 to a [row,col] array format - ONE LETTER ROW NAMES ONLY\r\n        try {\r\n            let result = REF_RE.exec(ref);\r\n            let rowval = parseInt(result[2]);\r\n            if (isNaN(rowval)) \r\n                throw new Error('row number is not valid ' + ref);\r\n            if (result[1].charCodeAt(0) < 64 || result[1].charCodeAt(0) > 90)\r\n                throw new Error('col letter is not valid ' + ref);\r\n    \r\n            let colval = result[1].charCodeAt(0) - 64;\r\n    \r\n            return [rowval, colval];\r\n        }\r\n        catch (err) {\r\n            console.error('ref2rc error: ', err);\r\n        }\r\n        return [undefined, undefined];\r\n    }\r\n    static refrange2rc (refrange) {\r\n        try {\r\n            let [ref1, ref2] = refrange.split(':');\r\n            if (ref1 === undefined || ref2 === undefined) {\r\n                throw new Error('invalid range', refrange);\r\n            }\r\n    \r\n            let [r1, c1] = KakuroStore.ref2rc(ref1);\r\n            let [r2, c2] = KakuroStore.ref2rc(ref2);\r\n    \r\n            return [r1, c1, r2, c2];\r\n        }\r\n        catch (err) {\r\n            console.error('refrange2rc error: ', err);\r\n        }\r\n        \r\n        return [undefined, undefined, undefined, undefined];\r\n    }\r\n    static clue2rc (cluestring) {\r\n        try {\r\n            let [refrange, clueval] = cluestring.split('=');\r\n            if (refrange === undefined || clueval === undefined) \r\n                throw new Error('invalid clue format ' + cluestring);\r\n            \r\n            let [r1, c1, r2, c2] = KakuroStore.refrange2rc(refrange);\r\n            let val = parseInt(clueval);\r\n    \r\n            return [r1, c1, r2, c2, val];\r\n        }\r\n        catch (err) {\r\n            console.error('refrange2rc error: ', err);\r\n        }\r\n        \r\n        return [undefined, undefined, undefined, undefined];\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    // Puzzle \r\n    //\r\n    getUnfinishedCount () {\r\n        // count the unfinished puzzle cells in the current grid\r\n        return this.grid.reduce( (prev,curr) => prev + (curr.value ? 1 : 0), 0);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    //\r\n    // Puzzle updating functions\r\n    // - manage changing the state of the puzzle after changing a digit\r\n    //\r\n    getValueAtRC (row, col) {\r\n        return this.grid[row][col].value;\r\n    }\r\n    getValueAtRef (refstr) {\r\n        let [row, col] = KakuroStore.ref2rc(refstr);\r\n        return this.getValueAtRC(row, col);\r\n    }\r\n\r\n    toString() {\r\n        let str = `${this.rows} x ${this.cols} puzzle:\\n`;\r\n        for (const r of this.grid) {\r\n            for (const c of r) {\r\n                str += c.isSpace ? (c.value || '.') : '#';\r\n            }\r\n            str += '\\n';\r\n        }\r\n        return str;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Puzzle updating functions\r\n// - manage changing the state of the puzzle after changing a digit\r\n//\r\n// function findDataValueEl (element) {\r\n//     // find the element with the data value (upstream if necessary)\r\n//     var el = element;\r\n//     while (el && !el.hasAttribute('data-value')) {\r\n//         el = el.parentNode;\r\n//     }\r\n//     if (!el) {\r\n//         console.debug('findDataValueEl for', element, 'found no data-value');\r\n//         return null;\r\n//     }    \r\n\r\n//     return el;\r\n// }\r\n// function setDataValue (element, value) {\r\n//     //console.debug('setCellValue: ', element, value);\r\n//     if (!element.hasAttribute('data-value')) {\r\n//         console.warn('setDataValue for non data-value element ', element);\r\n//         return;\r\n//     }\r\n\r\n//     // upate only if there was a change\r\n//     const oldval = parseInt(element.getAttribute('data-value')) || '';\r\n//     let newval = parseInt(value);\r\n//     if (isNaN(newval) || newval < 1 || newval > 9) newval = '';\r\n//     if (oldval != newval) {\r\n//         element.setAttribute('data-value', newval);\r\n//         if (newval == '') {\r\n//             // this cell has been cleared, reset its mask\r\n//             resetCellMask(element);\r\n//         } else {\r\n//             // this cell is now solved. clear its mask\r\n//             element.setAttribute('data-valuemask', '');\r\n//         }\r\n\r\n//         const to_update = findRelatedCells(element).filter (cell => !isCellSolved(cell));\r\n//         //console.debug(`setDataValue changed ${element.id} from [${oldval}] to [${newval}] - rebuild value masks`, to_update);\r\n//         if (oldval > '') {\r\n//             // and old value was removed - add it back to the masks...\r\n//             to_update.forEach (cell => addToCellMask(cell, oldval));\r\n//         }\r\n\r\n//         if (newval > '') {\r\n//             // a new value has been set. remove it from the masks...\r\n//             to_update.forEach (cell => delFromCellMask(cell, newval));\r\n//         }\r\n//     }\r\n//     showHintDigits(element);\r\n\r\n// }\r\n// function getDataValue (element) {\r\n//     return element.getAttribute('data-value');\r\n// }\r\n// function isCellSolved (element) {\r\n//     return (getDataValue(element) > 0);\r\n// }\r\n\r\n// function getCluesForCell (cell) {\r\n//     if (!cell.hasAttribute('data-clues')) {\r\n//         console.warn('getCluesForCell called with invalid cell ', cell);\r\n//         return [];\r\n//     }\r\n\r\n//     // get the clues linked to this element...\r\n//     const clueids = cell.getAttribute('data-clues');\r\n//     const rval = clues.filter(clue => clueids.indexOf(clue.name) >= 0);\r\n\r\n//     return rval;\r\n// }\r\n\r\n// function findRelatedCells (element) {\r\n//     if (element === null || element === undefined || !element.hasAttribute('data-clues')) {\r\n//         console.debug('findRelatedCells... element is not valid ', element);\r\n//         return [];\r\n//     }\r\n\r\n//     // run through all cells in related clues (except myself)\r\n//     let relatedcells = [];\r\n//     for (const clue of getCluesForCell(element)) {\r\n//         for (const cell of clue.cells) {\r\n//             if (cell !== element)   relatedcells.push(cell);\r\n//         }\r\n//     }\r\n\r\n//     return relatedcells;\r\n// }\r\n\r\n// // resetCellMask\r\n// // - reset the mask to the combination of clue masks and related solved cells\r\n// function resetCellMask (cell) {\r\n//     if (!cell.hasAttribute('data-valuemask') || !cell.hasAttribute('data-clues')) {\r\n//         console.warn('resetCellMask with invalid cell ref: ', cell);\r\n//         return;\r\n//     }\r\n\r\n//     let new_valuemask = ALL_VALUES_MASK;\r\n//     getCluesForCell(cell).forEach (clue => {\r\n//         let cluemask = 0;\r\n\r\n//         // build a mask for all currently solved cells in this clue\r\n//         let solvedmask = 0;\r\n//         clue.cells.forEach (cell => {\r\n//             let soln = parseInt(cell.getAttribute('data-value'));\r\n//             if (!isNaN(soln) && soln > 0 && soln < 10) {\r\n//                 solvedmask |= (1 << (soln - 1));\r\n//             }\r\n//         });\r\n//         //console.debug('resetCellMask ' + cell.id + ': clue=' + clue.name + ' solved=' + maskToString(solvedmask));\r\n\r\n//         // reduce the mask by the clue masks\r\n//         const combos = CLUE_COMBINATIONS.get(`${clue.cells.length}.${clue.value}`);\r\n//         for (const combo of combos) {\r\n//             // if this combo contains all of the solved cells ...\r\n//             const combomask = combosToMask([combo]);\r\n//             if ((combomask & solvedmask) == solvedmask) {\r\n//                 //console.debug('resetCellMask ' + cell.id + ': clue=' + clue.name + ' combo=' + maskToString(combomask) + ' is valid');\r\n//                 cluemask |= (combomask & ~solvedmask);\r\n//             } else {\r\n//                 //console.debug('resetCellMask ' + cell.id + ': clue=' + clue.name + ' combo=' + maskToString(combomask) + ' not valid');\r\n//             }\r\n//         }\r\n\r\n//         //console.debug('\\t: clue=' + clue.name + ' results in:' + maskToString(cluemask));\r\n//         new_valuemask &= cluemask;\r\n//     });\r\n\r\n//     cell.setAttribute('data-valuemask', new_valuemask);\r\n//     showHintDigits(cell);\r\n// }\r\n\r\n// function addToCellMask (cell, value) {\r\n//     if (!cell.hasAttribute('data-valuemask') || !cell.hasAttribute('data-clues')) {\r\n//         console.warn('resetCellMask with invalid cell ref: ', cell);\r\n//         return;\r\n//     }\r\n//     resetCellMask(cell);\r\n\r\n//     // for now - save the old mask, then see if the value would be allowed.\r\n//     // if it is, then merge the old mask with the new value (not the recalc'd)\r\n//     // let savedmask = cell.getAttribute('data-valuemask');\r\n//     // resetCellMask(cell);\r\n//     // let newmask = cell.getAttribute('data-valuemask');\r\n//     // let valuemask = (1 << (value - 1));\r\n//     // if ((newmask & valuemask) == valuemask) {\r\n//     //     // the value can be added.\r\n//     //     savedmask |= valuemask;\r\n//     //     cell.setAttribute('data-valuemask', savedmask);\r\n//     //     showHintDigits(cell);\r\n//     // }\r\n\r\n// }\r\n// function delFromCellMask (cell, value) {\r\n//     if (!cell.hasAttribute('data-valuemask') || isNaN(parseInt(value))) {\r\n//         console.warn('delFromCellMask with invalid cell ref or value: ', cell, value);\r\n//         return;\r\n//     }\r\n//     resetCellMask(cell);\r\n\r\n//     // let cellmask = cell.getAttribute ('data-valuemask');\r\n//     // let valuemask = (1 << (parseInt(value) - 1));\r\n//     // cellmask &= ~valuemask;\r\n//     // cell.setAttribute ('data-valuemask', cellmask);\r\n//     // showHintDigits(cell);\r\n// }\r\n\r\n\r\n","export default class KakuroView {\r\n    constructor (puzzle) {\r\n\r\n        console.debug('Create new KakuroView with puzzle ' + puzzle);\r\n        console.debug( puzzle.class )\r\n    }\r\n\r\n}\r\n\r\n\r\n//     function puzzleTableFromString (cluestr) {\r\n//         // parse puzzlestring to create the puzzle table and a set of parsed clues\r\n//         let puzzleTable = document.createElement('table');\r\n//         puzzleTable.className = 'fixedTable';\r\n//         puzzleTable.cellPadding = 0;\r\n//         puzzleTable.cellSpacing = 0;\r\n\r\n//         let rawclues = cluestr.split(/[,;]/);\r\n//         console.debug (`DEBUG: buildKakuro from ${rawclues.length} clues`);\r\n\r\n//         // determine the grid dimensions\r\n//         let rows = rawclues.reduce((maxrow, clue) => {\r\n//             let [,,R1,,R2,] = clue.match(CLUE_RE);\r\n//             return Math.max(maxrow, Math.max(R1, R2));\r\n//         }, 0);\r\n//         let cols = rawclues.reduce((maxcol, clue) => {\r\n//             let [,C1,,C2,,] = clue.match(CLUE_RE);\r\n//             return Math.max(maxcol, Math.max(C1.charCodeAt(0), C2.charCodeAt(0)));\r\n//         }, 65) - 64;\r\n//         console.debug(`DEBUG: parseKakuro - ${cols}x${rows}`);\r\n\r\n//         // build the base grid array\r\n//         for( var r = 0; r <= rows; r++) {\r\n//             let trow = puzzleTable.insertRow();\r\n//             for( var c = 0; c <= cols; c++) {\r\n//                 let item = trow.insertCell();\r\n//                 item.id = rc2ref (r, c);\r\n//                 item.className = 'puzzleClue';\r\n//             }\r\n//         }\r\n\r\n//         // parse the clue strings into something easier to use\r\n//         // and update the blank array with content...\r\n//         for( let cluestr of rawclues ) {\r\n//             let [r1, c1, r2, c2, val] = clue2rc(cluestr);\r\n\r\n//             // add the clue to the grid\r\n//             let clueDiv = document.createElement('div');\r\n//             clueDiv.appendChild (document.createTextNode (val));\r\n//             clueDiv.setAttribute ('data-cluename', cluestr);\r\n//             clueDiv.addEventListener ('mouseover', showCombinationsHover);\r\n//             clueDiv.addEventListener ('mouseout', hideCombinationsHover);\r\n\r\n//             if (r1 == r2) {\r\n//                 // Horizontal clue\r\n//                 clueDiv.className = 'clueRight';\r\n//                 let clueEl = puzzleTable.querySelector ('#' + rc2ref(r1, c1-1));\r\n//                 clueEl.appendChild (clueDiv);\r\n//             } else {\r\n//                 // Vertical clue\r\n//                 clueDiv.className = 'clueDown';\r\n//                 let clueEl = puzzleTable.querySelector ('#' + rc2ref(r1-1, c1));\r\n//                 clueEl.appendChild (clueDiv);\r\n//             }\r\n\r\n//             // save the parsed clue for later\r\n//             let thisclue = {\r\n//                 name: cluestr,\r\n//                 value: val,\r\n//                 cells: [],         \r\n//             };\r\n\r\n//             // get the clue combinations - key is [length].[value] \r\n//             const cluelength = Math.abs(r2 - r1) + Math.abs(c2 - c1) + 1;\r\n//             thisclue.combinations = CLUE_COMBINATIONS.get (`${cluelength}.${val}`).slice (0);\r\n//             const clueMask = combosToMask(thisclue.combinations);\r\n\r\n//             // add all of the cells to the clue\r\n//             for (let row = r1; row <= r2; row++) {\r\n//                 for (let col = c1; col <= c2; col++) {\r\n//                     let cellid = rc2ref (row, col);\r\n//                     let cell = puzzleTable.querySelector (`#${cellid}`);\r\n//                     thisclue.cells.push (cell);\r\n//                     cell.className = 'puzzleSpace';\r\n\r\n//                     // reference the clue from the cell and cell from the clue\r\n//                     let cellclues = cell.getAttribute('data-clues') || '';\r\n//                     cell.setAttribute ('data-clues', (cellclues ? cellclues + ',' : '') + thisclue.name);\r\n\r\n//                     // work out the initial value for cells as we go\r\n//                     const cellMask = cell.getAttribute ('data-valuemask') || ALL_VALUES_MASK;\r\n//                     cell.setAttribute ('data-valuemask', cellMask & clueMask);\r\n//                 }\r\n//             }\r\n            \r\n//             clues.push(thisclue);\r\n//         }\r\n\r\n//         // enable the input and hinting for each cell\r\n//         let taborder = 1;\r\n//         for (let cell of puzzleTable.querySelectorAll('.puzzleSpace')) {\r\n//             // make sure all cells to be completed are set up for entry\r\n//             cell.setAttribute ('data-value', '');\r\n\r\n//             // need a container div to hold the two content parts\r\n//             let cellContent = cell.appendChild (document.createElement('div'));\r\n//             cellContent.className = 'puzzleCellContainer';\r\n            \r\n//             // append a hint table elements to this item...\r\n//             let hinttable = cellContent.appendChild( document.createElement('table') );\r\n//             hinttable.className = 'puzzleCellHintsTable';\r\n//             hinttable.cellPadding = 0; \r\n//             hinttable.cellSpacing = 0;\r\n//             for (let r = 0; r < 3; r++) {\r\n//                 let hintrow = hinttable.insertRow();\r\n//                 for (let c = 1; c <= 3; c++) {\r\n//                     let val = r*3 + c;\r\n//                     let hint = hintrow.insertCell();\r\n//                     hint.id = cell.id + '--' + val;\r\n//                     hint.className = 'hintDigit';\r\n//                     hint.innerText = val;\r\n//                     hint.contentEditable = false;\r\n//                     hint.disabled = true;\r\n//                 }\r\n//             }\r\n\r\n//             // add a value display/edit node      \r\n//             let inputNode = cellContent.appendChild( document.createElement('input') );\r\n//             inputNode.className = 'puzzleInput';\r\n//             inputNode.setAttribute('maxlength', '9');\r\n//             inputNode.setAttribute ('taborder', taborder++);\r\n//             inputNode.addEventListener('keydown', filterKeyPresses);\r\n//             inputNode.addEventListener('input', handleInput);\r\n//             inputNode.addEventListener('change', handleCellChange);\r\n//         }\r\n\r\n//         return puzzleTable;\r\n//     }\r\n    \r\n\r\n\r\n// ////////////////////////////////////////////////////////////////////////////////\r\n// //\r\n// // UI Interaction functions\r\n// //\r\n// // These function should respond to player input and update parts of the display.\r\n// // No calculations should happen here.\r\n// //\r\n\r\n// // Show/Hide the combinations when hovering over a clue\r\n// function showCombinationsHover (event) {\r\n//     // show the combinations for a clue (if the hint is selected)\r\n//     if (!document.getElementById('showCluesChk').checked) return;\r\n\r\n//     // find the clue\r\n//     const clue = clues.find(item => item.name === event.target.getAttribute('data-cluename'));\r\n//     if (clue === undefined) return;\r\n\r\n//     // build the popup content\r\n//     const clue_title = `${clue.value} in ${clue.cells.length}`;\r\n//     let valuemask = clue.cells.reduce( (prev, curr) => {\r\n//         const val = parseInt (curr.getAttribute('data-value'));\r\n//         if (isNaN(val) || val < 0 || val > 9) {\r\n//             return prev;\r\n//         } else {\r\n//             return prev | (1 << (val - 1));\r\n//         }\r\n//     }, 0);\r\n//     if (valuemask == 0) valuemask = ALL_VALUES_MASK;\r\n//     const clue_combos = clue.combinations\r\n//         .map (combo => {\r\n//             const classname = combosToMask([combo]) & valuemask ? 'validcombo' : 'invalidcombo';\r\n//             return `<span class=\"${classname}\">(${combo.split('').join(',')})</span>`;\r\n//         })\r\n//         .join(' ');\r\n    \r\n\r\n//     // popup the clue details\r\n//     const hover = document.getElementById('hoverText');\r\n//     hover.innerHTML = `<div class=\"title\">${clue_title}</div><div class=\"body\">${clue_combos}</div>`;\r\n//     hover.style.display = 'block';\r\n//     hover.style.left = event.target.offsetLeft; //event.target.offsetLeft + event.target.offsetWidth / 2;\r\n//     hover.style.top = event.target.offsetTop - hover.clientHeight * 1.1; // event.target.clientHeight * 1.5; //event.target.offsetTop - hover.clientHeight;\r\n// }\r\n// function hideCombinationsHover (event) {\r\n//     //_popuptimer_id_ = window.setTimeout(hidePossible, 700);\r\n//     document.getElementById('hoverText').style.display = 'none';\r\n// }\r\n\r\n// // Show/Hide hint digits for a cell\r\n// function showAllHintDigits (show) {\r\n//     for (const cell of document.getElementById('puzzleTable').getElementsByClassName('puzzleSpace')) {\r\n//         showHintDigits (cell, show);\r\n//     }\r\n// }\r\n// function showHintDigits (cell, show) {\r\n//     if (show === undefined || show === null) {\r\n//         show = document.getElementById('showValuesChk').checked;\r\n//     }\r\n\r\n//     let cellmask = parseInt(cell.getAttribute('data-valuemask'));\r\n//     for (const digit of cell.getElementsByClassName('hintDigit')) {\r\n//         let digitval = parseInt(digit.id[digit.id.length - 1]); // value is in the last digit of the id\r\n//         let digitmask = (1 << (digitval-1));\r\n\r\n//         let showdigit = show && !isCellSolved(cell) && ((cellmask & digitmask) > 0);\r\n//         digit.style.visibility = showdigit ? 'visible' : 'hidden';\r\n//     }\r\n// }\r\n\r\n// // Manage input \r\n// function filterKeyPresses (event) {\r\n//     if (event.key == 'Tab' || event.key == 'Delete' || event.key == 'Backspace' || \r\n//         event.key == 'ArrowLeft' || event.key == 'ArrowRight' ||\r\n//         '123456789'.indexOf(event.key) >= 0) \r\n//     {\r\n//         // only allow one of any digit\r\n//         if (event.target.value.indexOf(event.key) >= 0) event.preventDefault();\r\n//         return true;\r\n//     } else if (event.key == 'Enter' || event.key == 'Escape') {\r\n//         //console.debug('filterKeypress: end input on ' + event.key);\r\n//         event.target.blur();\r\n//         return true;\r\n//     }else {\r\n//         //console.debug('filterKeypress: reject ' + event.key);\r\n//         event.preventDefault();\r\n//         return false;\r\n//     }\r\n// }\r\n// function handleInput (event) {\r\n//     if (event.target.value.length <= 1) {\r\n//         // value input\r\n//         event.target.classList.remove('hints');\r\n//     } else {\r\n//         // hint input\r\n//         event.target.classList.add('hints');\r\n//     }\r\n// }\r\n// function handleCellChange (event) {\r\n//     //console.debug('handleCellChange', event);\r\n    \r\n//     // filter out any repeated digits. And automatically sort them (for niceness)?\r\n//     let digits = event.target.value.split('')\r\n//         .filter((v) => '123456789'.indexOf(v) >= 0) // digits only\r\n//         // .sort()\r\n//         .filter((val, idx, arr) => (arr.findIndex((e) => e === val) >= idx) );\r\n//     event.target.value = digits.join('');\r\n\r\n//     // if this changed the possible solution state, then update the\r\n//     let valueEl = findDataValueEl(event.target);\r\n//     setDataValue (valueEl, event.target.value);\r\n// }\r\n","'use strict';\r\n\r\nimport KakuroStore from './kakuro-store';\r\n// import KakuroEditView from './kakuro-edit-view';\r\nimport KakuroPlayView from './kakuro-view';\r\nimport SolveSingle from './solve-single';\r\nimport ReducePairs from './reduce-pairs';\r\nimport ReduceHiddenPairs from './reduce-hiddenpairs';\r\n\r\n// const puzzlestring = \"5x5;X...X.......X.......X...X;B1:B5=21;C1:C2=5;D1:D5=34;B1:D1=7;A2:A4=9;E2:E4=8;A2:E2=16;A3:B3=6;D3:E3=8;A4:E4=34;C4:C5=16;B5:D5=22\";\r\n// const puzzlestring = \"5x7;...X..X...X...X...X....X......X....;A1:A2=6;B1:B5=33;C1:C3=11;E1:E2=12;F1:F5=16;A1:C1=22;E1:F1=13;A2:C2=10;E2:G2=8;G2:G5=21;B3:D3=13;D3:D5=22;F3:G3=15;A4:A5=7;E4:E5=13;A4:B4=9;D4:G4=12;A5:B5=12;D5:G5=27\";\r\n// const puzzlestring = \"8x8;XX..XX......XX....X....X...X..XXXX..X...X....X....XX......XX..XX;C1:C2=3;D1:D3=6;G1:G3=6;H1:H2=4;A2:A4=6;B2:B4=8;C1:D1=4;G1:H1=3;A2:D2=10;E3:E4=4;F3:F5=7;G2:H2=4;A3:B3=4;C4:C6=7;D3:G3=10;A4:C4=7;D5:D6=4;E4:F4=4;G5:G7=7;H5:H7=8;B6:B8=6;C5:D5=4;E6:E8=22;F5:H5=7;A7:A8=4;B6:E6=11;F7:F8=16;G6:H6=4;A7:B7=3;E7:H7=23;A8:B8=4;E8:F8=16\";\r\n// const puzzlestring = \"9x9;...XX...X...X.....X....X...XX...XX....X...X....XX...XX...X....X.....X...X...XX...;A1:A2=9;B1:B3=24;C1:C4=14;F1:F2=8;G1:G3=12;H1:H5=31;A1:C1=11;E2:E8=41;F1:H1=24;I2:I5=12;A2:C2=24;D3:D5=24;E2:I2=23;B3:E3=28;G3:I3=9;A5:A8=30;B5:B9=18;C4:E4=11;F5:F7=23;H4:I4=12;A5:B5=13;D5:F5=22;G6:G9=30;H5:I5=4;A6:B6=7;C7:C9=7;E6:G6=22;H7:H9=23;A7:C7=12;D8:D9=12;E7:H7=30;I8:I9=6;A8:E8=20;G8:I8=17;B9:D9=19;G9:I9=16\";\r\n// const puzzlestring = \"9x9;X..X....X...X.......X..XX....X..X...X...X...X...X..X....XX..X.......X...X....X..X;B1:B9=45;C1:C2=8;E1:E4=13;F1:F2=7;G1:G2=5;H1:H9=45;A2:A4=13;B1:C1=12;E1:H1=17;I2:I4=9;A2:C2=7;D3:D5=14;E2:I2=19;A3:B3=12;D3:E3=3;G4:G5=6;H3:I3=12;A4:B4=7;C5:C6=8;D4:E4=10;F5:F7=21;G4:I4=7;A6:A8=24;B5:D5=9;E6:E9=28;F5:H5=9;I6:I8=19;A6:C6=23;E6:F6=16;H6:I6=5;A7:B7=10;C8:C9=7;D8:D9=14;E7:F7=15;G8:G9=15;H7:I7=14;A8:E8=35;G8:I8=21;B9:E9=22;G9:H9=16\";\r\nconst DEFAULT_PUZZLE =  'B1:B6=37;C1:C2=5;D1:D3=17;E1:E4=12;H1:H2=16;I1:I2=10;A2:A5=27;G2:G6=32;F3:F5=23;C4:C8=31;H4:H9=30;D5:D7=8;I5:I8=29;E6:E9=10;F7:F9=22;A8:A9=8;B8:B9=15;G8:G9=17;B1:E1=22;H1:I1=11;A2:E2=16;G2:I2=23;A3:B3=16;D3:G3=12;A4:C4=23;E4:H4=27;A5:D5=29;F5:I5=29;B6:E6=12;G6:I6=24;C7:F7=13;H7:I7=12;A8:C8=23;E8:I8=24;A9:B9=8;E9:H9=25';\r\n\r\nconst Solve_Steps = [\r\n    { name: SolveSingle.name, stepfn: SolveSingle.solve, showfn: SolveSingle.show },\r\n    { name: ReducePairs.name, stepfn: ReducePairs.solve, showfn: ReducePairs.show },\r\n    { name: ReduceHiddenPairs.name, stepfn: ReduceHiddenPairs.solve, showfn: ReduceHiddenPairs.show },\r\n];\r\n\r\n\r\n//\r\n// Puzzle solving functions\r\n//\r\nconst ALL_VALUES_MASK = 0x1ff;\r\nfunction maskToString (maskval) {\r\n    let rval = '';\r\n    rval += (maskval & 1)?'1':'.'; \r\n    rval += (maskval & 2)?'2':'.'; \r\n    rval += (maskval & 4)?'3':'.'; \r\n    rval += (maskval & 8)?'4':'.'; \r\n    rval += (maskval & 16)?'5':'.'; \r\n    rval += (maskval & 32)?'6':'.'; \r\n    rval += (maskval & 64)?'7':'.'; \r\n    rval += (maskval & 128)?'8':'.'; \r\n    rval += (maskval & 256)?'9':'.'; \r\n    return rval;\r\n}\r\nfunction stringToMask (stringval) {\r\n    let rval = 0;\r\n    rval += (stringval.indexOf('1') >= 0)?1:0;\r\n    rval += (stringval.indexOf('2') >= 0)?2:0;\r\n    rval += (stringval.indexOf('3') >= 0)?4:0;\r\n    rval += (stringval.indexOf('4') >= 0)?8:0;\r\n    rval += (stringval.indexOf('5') >= 0)?16:0;\r\n    rval += (stringval.indexOf('6') >= 0)?32:0;\r\n    rval += (stringval.indexOf('7') >= 0)?64:0;\r\n    rval += (stringval.indexOf('8') >= 0)?128:0;\r\n    rval += (stringval.indexOf('9') >= 0)?256:0;\r\n    return rval;\r\n}\r\nfunction combosToMask (combos) {\r\n    let mask = 0;\r\n    for (let combo of combos) {\r\n        for (let digit of combo) {\r\n            let d = parseInt(digit);\r\n            let m = 1 << (d-1);\r\n            mask |= m;\r\n        }\r\n    }\r\n    return mask;\r\n}\r\nfunction combosToString (combos) {\r\n    return maskToString (combosToMask (combos));\r\n}\r\n\r\n\r\n\r\nfunction setShowClues (show) {\r\n    if (view) view.setShowCombos(show);\r\n}\r\nfunction setShowValues (show) {\r\n    if (view) view.setShowHints(show);\r\n}\r\n\r\n\r\nfunction nextStep() {\r\n    if (!puzzle) return;\r\n\r\n    if (puzzle && puzzle.getUnfinishedCount() == 0) {\r\n        document.getElementById('stepDescription').textContent = 'Finished!';\r\n        return;\r\n    }\r\n\r\n\r\n    \r\n    document.getElementById('nextStepButton').disabled = true;\r\n\r\n    console.debug('\\nNEXT STEP\\n------------------------------------------------------------\\n');\r\n    let didSomething = true;\r\n    let userWait = false;\r\n    while (didSomething && !userWait) {\r\n        didSomething = false;\r\n        userWait = false;\r\n\r\n        for (let step of Solve_Steps) {\r\n            console.debug('STEP ' + step.name + '...');\r\n            const stepresult = step.stepfn();\r\n            if (stepresult) {\r\n                console.debug('\\tSUCCESS', stepresult.title);\r\n                userWait = step.showfn (stepresult);\r\n                didSomething = true;   // won't be done until the user accepts it\r\n                break;\r\n            }\r\n        }   \r\n\r\n        if (!didSomething && !userWait) {\r\n            // NO MORE SOLVING IDEAS!\r\n            console.debug('NO STEPS REMAIN.');\r\n            document.getElementById('stepDescription').innerText = 'No more ideas. Sorry';\r\n        }\r\n    }\r\n\r\n    console.debug (puzzle.getUnfinishedCount() + ' cells remaining');\r\n    document.getElementById('nextStepButton').disabled = false;\r\n}\r\n\r\n//\r\n// MAIN  \r\n//\r\nlet puzzle = null;\r\nlet view = null;\r\n\r\n{\r\n    console.info('-- KAKURO.JS --');\r\n    \r\n    let puzzleelement = document.getElementById('puzzleTable');\r\n    let puzzlestring = window.sessionStorage.getItem('@kakuro/clues') || DEFAULT_PUZZLE;\r\n\r\n    try {\r\n        // laod the puzzle\r\n        puzzle = new KakuroStore (puzzlestring);\r\n        view = new KakuroPlayView (puzzle);\r\n    } catch (err) {\r\n        alert('Error in the loaded Kakuro!');\r\n        puzzleelement.innerHTML = '<h2>Invalid puzzle</h2><p>' + err + '</p>';\r\n    }\r\n}\r\n\r\n\r\n","export default class ReduceHiddenPairs {\r\n    \r\n}\r\n","// STEP (reduce pairs)\r\n// - Try to eliminate options for a sum with only two remaining cells by testing them for validity\r\nfunction reduceValuePairs () {\r\n    for (const clue of clues) {\r\n        let remainder = clue.value;\r\n        let unsolved = [];\r\n        clue.cells.forEach((cell) => {\r\n            let val = parseInt(getDataValue(cell));\r\n            if (isNaN(val) || val === 0) {\r\n                unsolved.push(cell);\r\n            } else {\r\n                remainder -= val;\r\n            }\r\n        });\r\n        if (unsolved.length == 2) {\r\n            //console.debug(`\\tCell ${unsolved[0].id} + ${unsolved[1].id} must be ${remainder} to make ${clue.value}`);\r\n            let mask0 = unsolved[0].getAttribute('data-valuemask');\r\n            let mask1 = unsolved[1].getAttribute('data-valuemask');\r\n\r\n            // test each possible value for each cell\r\n            for (let pval = Math.max(remainder - 9, 1); pval <= Math.min(remainder - 1, 9); pval++) {\r\n                let pmask = 1 << (pval - 1);\r\n                let rmask = 1 << (remainder - pval - 1);\r\n                let valid = (mask0 & pmask) > 0 && (mask1 & rmask) > 0;\r\n                //console.debug(`\\t\\tif ${unsolved[0].id} is ${pval} then ${unsolved[1].id} must be ${remainder - pval} - ${valid}`);\r\n\r\n                if (!valid) {\r\n                    // remove these options from the masks...\r\n                    mask0 &= ~pmask;\r\n                    mask1 &= ~rmask;\r\n                }\r\n            }\r\n\r\n            // apply the reduction as a step...\r\n            if (unsolved[0].getAttribute('data-valuemask') != mask0 \r\n                || unsolved[1].getAttribute('data-valuemask') != mask1) {\r\n                console.debug(`STEP (reduce pairs): ${unsolved[0].id} + ${unsolved[1].id} = ${remainder}`);\r\n                console.debug(`\\t- Reduced masks: ${unsolved[0].id} : ${maskToString(unsolved[0].getAttribute('data-valuemask'))} => ${maskToString(mask0)}`);\r\n                console.debug(`\\t- Reduced masks: ${unsolved[1].id} : ${maskToString(unsolved[1].getAttribute('data-valuemask'))} => ${maskToString(mask1)}`);\r\n\r\n            \r\n                // we are showing the values, so show the reduction step\r\n                let solveStep = {\r\n                    type: 'REDUCE',\r\n                    title: `Eliminated possibilities where ${unsolved[0].id} + ${unsolved[1].id} = ${remainder}`,\r\n                    description: `Eliminate values from ${unsolved[0].id} and ${unsolved[1].id} that cannot make ${clue.name}`,\r\n                    constraints: [ clue ],\r\n                    targets: [],\r\n                    valueMasks: [],\r\n                };\r\n                if (unsolved[0].getAttribute('data-valuemask') != mask0) {\r\n                    solveStep.targets.push (unsolved[0]);\r\n                    solveStep.valueMasks.push (mask0);\r\n                }\r\n                if (unsolved[1].getAttribute('data-valuemask') != mask1) {\r\n                    solveStep.targets.push (unsolved[1]);\r\n                    solveStep.valueMasks.push (mask1);\r\n                }\r\n                return solveStep;        \r\n            }                                                                               \r\n        }\r\n    }\r\n    return null;\r\n}\r\n// showReduceStep({\r\n//     type: 'REDUCE',\r\n//     description: `Eliminate impossible values from ${unsolved[0].id} and ${unsolved[1].id}`,\r\n//     targets: [ unsolved[0], unsolved[1] ],\r\n//     valueMasks: [ mask0, mask1 ],\r\n//     constraints: [ clue ],\r\n// })\r\nfunction showReduceStep (step) {\r\n    // Highlight chanegs in the UI only if values are being shown...\r\n    if (document.getElementById('showValuesChk').checked) {        \r\n        // highlight cells from matching rules...\r\n        step.constraints.forEach (clue =>\r\n            clue.cells.forEach (cell => cell.classList.add('solveConstraint'))\r\n        );\r\n        step.targets.forEach (cell => cell.classList.add('solveStep'));\r\n    \r\n        // update the descriptive explanation\r\n        document.getElementById('stepDescription').innerText = step.description;\r\n\r\n        // showremoved options in red\r\n        for (let n in step.targets) {\r\n            const oldmask = parseInt(step.targets[n].getAttribute('data-valuemask'));\r\n            const newmask = step.valueMasks[n];\r\n            const diff = oldmask ^ newmask;\r\n\r\n            //console.debug(`- mask items ${maskToString(diff)} removed from ${step.targets[n].id}`);\r\n            step.targets[n].setAttribute('data-valuemask', step.valueMasks[n]);\r\n            showHintDigits (step.targets[n], true);\r\n            for (let d = 0; d < 9; d++) {\r\n                if ((diff & (1 << d)) > 0) {\r\n                    let rmoved = step.targets[n].querySelector(`.hintdigit[id$=\"-${d+1}\"]`);\r\n                    rmoved.classList.add('removed');\r\n                    rmoved.style.visibility = 'visible';\r\n                }\r\n            }\r\n        }\r\n\r\n        // set a focus to help trigger the clear out highlights?\r\n        document.getElementById('stepDescription').focus();\r\n        document.getElementById('stepDescription').addEventListener ('blur', clearReduceHighlights);\r\n        \r\n        return true; // wait for user interaction\r\n    }\r\n\r\n    // Values are not shown in the UI - just apply and move on\r\n    for (let n in step.targets) {\r\n        step.targets[n].setAttribute('data-valuemask', step.valueMasks[n]);\r\n    }\r\n    return false;\r\n}\r\nfunction clearReduceHighlights (event) {\r\n    console.debug('clearReduceHighlights');\r\n    event.target.removeEventListener('blur', clearReduceHighlights);\r\n    document.querySelectorAll('.solveConstraint').forEach(cell => cell.classList.remove('solveConstraint'));\r\n    document.querySelectorAll('.solveStep').forEach(cell => cell.classList.remove('solveStep'));\r\n    document.querySelectorAll('.hintdigit.removed').forEach(cell => {\r\n        cell.classList.remove('removed');\r\n        cell.style.visibility = 'hidden';\r\n    });\r\n}","export default class SolveSingle {\r\n    solve () { \r\n        for (const cell of document.getElementsByClassName('puzzleSpace')) {\r\n            let cellMask = parseInt(cell.getAttribute('data-valuemask'));\r\n            let value = 0;\r\n            if (!isCellSolved(cell)) {\r\n                if (cellMask === 0x001) value = 1;\r\n                if (cellMask === 0x002) value = 2;\r\n                if (cellMask === 0x004) value = 3;\r\n                if (cellMask === 0x008) value = 4;\r\n                if (cellMask === 0x010) value = 5;\r\n                if (cellMask === 0x020) value = 6;\r\n                if (cellMask === 0x040) value = 7;\r\n                if (cellMask === 0x080) value = 8;\r\n                if (cellMask === 0x100) value = 9;\r\n            }\r\n\r\n            if (value > 0) {\r\n                console.debug('\\tsolution step found - ' + cell.id + '=' + value);\r\n\r\n                let solveStep = {\r\n                    type: 'SOLVE',\r\n                    cell: cell,\r\n                    value: value,\r\n                    title: `${value} is the only possible value for cell ${cell.id}`,\r\n                    description: `${value} is the only possible value for cell ${cell.id}`,\r\n                    constraints: getCluesForCell(cell)\r\n                };\r\n                for (const clue of solveStep.constraints) {\r\n                    solveStep.description += '\\n' + clue.name.padStart(8,' ') + ' => ' + combosToString(clue.combinations);\r\n                }\r\n\r\n                return solveStep;\r\n            }\r\n        } \r\n\r\n        return null;\r\n    }\r\n\r\n    show (solveStep) {\r\n        // highlight cells from matching rules...\r\n        solveStep.cell.classList.add('solveStep');\r\n        for (let clue of solveStep.constraints) {\r\n            for (let cell of clue.cells) {\r\n                cell.classList.add('solveConstraint');\r\n                showHintDigits(cell);\r\n            }\r\n        }\r\n\r\n        // update the descriptive explanation\r\n        document.getElementById('stepDescription').innerText = solveStep.description;\r\n\r\n        // enter, but don't apply the hint\r\n        const inputel = solveStep.cell.querySelector('input');\r\n        inputel.value = solveStep.value;\r\n        inputel.focus();\r\n        inputel.addEventListener('blur', applyValueEntrySolutionStep);\r\n\r\n        return true;    // wait for user\r\n    }\r\n\r\n    applyValueEntrySolutionStep (event) {\r\n        // apply the solution\r\n        handleCellChange(event);\r\n\r\n        // remove all solution step highlights and hooks\r\n        event.target.removeEventListener('blur', this.applyValueEntrySolutionStep);\r\n        document.querySelectorAll('.solveConstraint').forEach(cell => cell.classList.remove('solveConstraint'));\r\n        document.querySelectorAll('.solveStep').forEach(cell => cell.classList.remove('solveStep'));\r\n    }\r\n}\r\n"],"sourceRoot":""}